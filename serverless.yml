service: omni-dw-backend-services

provider:
    name: aws
    region: ${opt:region, 'us-east-1'}
    stage: ${opt:stage, 'dev'}
    versionFunctions: false
    tags: ${self:custom.tags}
    stackTags: ${self:custom.tags}
    vpc:
        securityGroupIds:
            - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
        subnetIds:
            - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}
    iamRoleStatements:
        - Effect: "Allow"
          Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "ec2:CreateNetworkInterface"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:DeleteNetworkInterface"
              - "ec2:AssignPrivateIpAddresses"
              - "ec2:UnassignPrivateIpAddresses"
          Resource: "*"
        - Effect: Allow
          Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:DeleteItem
              - dynamodb:Scan
          Resource: "*"
    environment:
        REGION: ${self:custom.region}
        STAGE: ${opt:stage, 'dev'}

    deploymentBucket:
        name: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
        serverSideEncryption: AES256

custom:
    region: ${opt:region, 'us-east-1'}
    stage: ${opt:stage, 'dev'}
    tags:
        Application: OmniDataWarehouseBackendServiceIndex
        CreateBy: BizCloudExperts
        Environment: ${self:custom.stage}

plugins:
    - serverless-offline

package:
    individually: true
functions:
    #  lambda's responsible for inserting values from streams to shipment-header table
    shipment-header-stream-to-dynamoDB: ${file(config/functions/shipment-header-stream-to-dynamoDB.yml):function}
    consignee-stream-to-dynamoDB: ${file(config/functions/consignee-stream-to-dynamoDB.yml):function}
    references-stream-to-dynamoDB: ${file(config/functions/references-stream-to-dynamoDB.yml):function}
    shipment-desc-stream-to-dynamoDB: ${file(config/functions/shipment-desc-stream-to-dynamoDB.yml):function}
    shipment-milestone-stream-to-dynamoDB: ${file(config/functions/shipment-milestone-stream-to-dynamoDB.yml):function}
    shipper-stream-to-dynamoDB: ${file(config/functions/shipper-stream-to-dynamoDB.yml):function}
    milestone-details-stream-to-dynamoDB: ${file(config/functions/milestone-details-stream-to-dynamoDB.yml):function}
    tracking-notes-stream-to-dynamoDB: ${file(config/functions/tracking-notes-stream-to-dynamoDB.yml):function}

layers:
    DWBackend:
        path: lambdaLayer/lib
        name: ${self:service}-layer-${self:provider.stage}
        description: Omni Tac Index lambda layer for all node modules - ${self:provider.stage}
        compatibleRuntimes:
            - nodejs14.x
            - nodejs18.x
        retain: false
# resources:
